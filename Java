Functional interfaces:
 An interface that contains only one abstract method. They can contain other default methods but only one abstract method is allowed. @FunctionalInterface is the optional annotation for compiler to know if the interface is functional.
 Comparable
 Runnable
 Callable
 java.util.function (https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html) important ones
 
 Note : generic parameters (for example, the T in Consumer<T>) can be bound only to reference types. So use above functional interface when you want to pass reference object and use 
 the primitive typed functional interface like IntPredicate when using primitive values. Else, there will be a performance impact when boxing and unboxing.Boxed values are a wrapper around primitive types and are stored on the heap. 
 Therefore, boxed values use more memory and require additional memory lookups to fetch the wrapped primitive value. 
 
 Important functional interfaces 
          Predicate<T> 	T -> boolean 	
            IntPredicate, LongPredicate,DoublePredicate 

          Consumer<T> 	T -> void 	
            IntConsumer, LongConsumer,DoubleConsumer 

          Function<T, R> 	T -> R 
           IntFunction<R>,
           IntToDoubleFunction,
           IntToLongFunction,
           LongFunction<R>,
           LongToDoubleFunction,
           LongToIntFunction,
           DoubleFunction<R>,
           DoubleToIntFunction,
           DoubleToLongFunction,
           ToIntFunction<T>,
           ToDoubleFunction<T>,
           ToLongFunction<T> 

         Supplier<T> 	() -> T 	
            BooleanSupplier, IntSupplier,LongSupplier, DoubleSupplier 

        UnaryOperator<T> 	T -> T 	
          IntUnaryOperator,
          LongUnaryOperator,
          DoubleUnaryOperator 

        BinaryOperator<T> 	(T, T) -> T 	
          IntBinaryOperator,
          LongBinaryOperator,
          DoubleBinaryOperator 

        BiPredicate<T, U> 	(T, U) -> boolean     

       BiConsumer<T, U> 	(T, U) -> void 	
        ObjIntConsumer<T>,
        ObjLongConsumer<T>,
        ObjDoubleConsumer<T> 

       iFunction<T, U, R> 	(T, U) -> R 	
        ToIntBiFunction<T, U>,
        ToLongBiFunction<T, U>,
        ToDoubleBiFunction<T, U> 

 Handling exceptions
  Note that none of the functional interfaces allow for a checked exception to be thrown. You have two options if you need the body of a lambda expression to throw an exception:
  define your own functional interface that declares the checked exception, or wrap the lambda body with a try/catch block.But you may be using an API that expects a functional interface such as Function<T, R> 
  and there’s no option to create your own.In this case, you can explicitly catch the checked exception: 
  
 Using local variables 
  There are some restrictions on what you can do with these variables. Lambdas are allowed to capture (to reference in their bodies) instance variables and static variables without
  restrictions. 
  But when local variables are captured, they have to be explicitly declared final or be effectively final.You may be asking yourself why local variables have these restrictions.
  First, there’s a key difference in how instance and local variables are implemented behind the scenes. Instance variables are stored on the heap, whereas local variables
  live on the stack. If a lambda could access the local variable directly and the lambda was used in a thread, then the thread using the lambda could try to access the variable
  after the thread that allocated the variable had deallocated it. Hence, Java implements access to a free local variable as access to a copy of it, rather than access to the 
  original variable. This makes no difference if the local variable is assigned to only once—hence the restriction. 
  
  
